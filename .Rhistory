blogdown::new_site(theme = 'kakawait/hugo-tranquilpeak-theme')
install_theme('kakawait/hugo-tranquilpeak-theme')
library(blogdown)
install_theme('kakawait/hugo-tranquilpeak-theme')
serve_site()
serve_site()
knitr::opts_chunk$set(collapse = TRUE)
summary(cars)
fit <- lm(dist ~ speed, data = cars)
fit
check_site()
check_site()
check_site()
blogdown:::new_post_addin()
getwd()
config_Rprofile()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
library(blogdown)
config_netlify()
blogdown:::preview_site(startup = TRUE)
blogdown:::new_post_addin()
blogdown:::new_post_addin()
library(blogdown)
serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::new_post_addin()
blogdown:::preview_site(startup = TRUE)
# google cloud project ID "Sen2rAM"
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(sen2r) #read in sentinel-2 imagery
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
check_gcloud()
Laguna_Ext <- vect("POLYGON ((-120.7063985 35.2706786,
-120.6881986 35.2813860,
-120.6709197 35.2768445,
-120.6741943 35.2647444,
-120.6883474 35.2544259,
-120.7063985 35.2706786))")
Laguna_Ext_sf <-  sf::st_as_sf(Laguna_Ext) #sf file type needed for GeoJSON
# webmercProj <- "+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +wktext  +no_defs"
#
# st_crs(Laguna_Ext_sf) <- webmercProj
st_crs(Laguna_Ext_sf) <- 3857
Laguna_file_name <- "Laguna_Ext.GeoJSON" #filename for writing and using GeoJSON
write_sf(Laguna_Ext_sf, Laguna_file_name) #write it to a GeoJSON format for ingestion by sen2r()
leaflet(st_as_sf(Laguna_Ext)) %>%
addTiles() %>%
addPolygons(fillColor = "transparent")
blogdown:::preview_site(startup = TRUE)
library(h3) #aggrigation on Ubers H3 hexagon grid
library(terra) #Spatial data tools
library(leaflet) #Interactive map viewer
library(leafpop)
library(sf) #for conversion between spatial formats
library(raster)
library(RColorBrewer)
library(dplyr)
laguna_file <- "Laguna_Ext.GeoJSON"
laguna_Ext <- read_sf(laguna_file)
leaflet(laguna_Ext) %>%
addTiles() %>%
addPolygons(fillColor = "transparent")
blogdown:::preview_site(startup = TRUE)
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::preview_site(startup = TRUE)
blogdown:::serve_site()
blogdown:::update_meta_addin()
getwd()
list.files("NDMI")
raster_ndmis_paths <- c(paste0("NDMI/", list.files("NDMI"))
raster_ndmis_paths <- c(paste0("NDMI/", list.files("NDMI")))
raster_ndmis_paths
choose.files()
raster_ndmis_paths <- c(paste0("~NDMI/", list.files("NDMI")))
raster_ndmis_paths <- c(paste0(getwd(),"/NDMI/", list.files("NDMI")))
raster_ndmis_paths
blogdown:::preview_site(startup = TRUE)
knitr::opts_chunk$set(echo = TRUE, fig.align = "center")
library(knitr)
#https://stackoverflow.com/questions/64597525/r-magick-square-crop-and-circular-mask
#https://www.r-bloggers.com/2016/11/extracting-exif-data-from-photos-using-r/
library(leaflet) #for interactive webmaps
library(sf)
library(magick) #image manipulation
library(imager)
library(plotrix)
library(hemispheR)
library(exifr)
library(dplyr)
leaflet() %>%
addTiles() %>%
addMarkers(lng = -120.859574336949,
lat = 35.31198188641437)
tracks <- read_sf("PathShape/Euc_Forest_path.shp")
tracks <- st_zm(tracks) #drop z dimension
leaflet(tracks$geometry) %>%
addProviderTiles("Esri.WorldImagery") %>%
addPolylines()
img_paths <- paste0("360_Pics/", list.files("360_Pics"))
num_pics <- length(img_paths)
rand_ind <- sample.int(num_pics, 2) #save index for later to continue to work with the same pictures
test_img_paths <-img_paths[rand_ind] #grab 2 random 360 pictures from the picture directory
sphere_to_hemi_rect <- function(image_path){
#'input: path to spherical image
#'output: rectangular projection of hemisphere image
sphere_rect_img <- image_read(image_path)
hemi_rect <- image_crop(sphere_rect_img, "100%x50%") #crop off bottom half of image
return(hemi_rect)
}
rect_imgs <- sphere_to_hemi_rect(test_img_paths)
image_append( rect_imgs, stack = TRUE)
hemi_rect_to_polar <- function(hemi_rect_image){
#project to polar coordinates
hemi_polar <- image_distort(hemi_rect_image,
"Polar",
c(0),
bestfit = TRUE)
#draw bounding
png(temp <- tempfile(fileext = ".png"), 736, 736)
par(mar = rep(0,4), yaxs="i", xaxs="i")
plot(0,
type = "n",
ylim = c(0,1),
xlim=c(0,1),
axes=F,
xlab=NA,
ylab=NA)
plotrix::draw.circle(.5,0.5,.5, col="black")
dev.off()
mask <-  image_read(temp) %>%
image_scale(as.character(image_info(hemi_polar)$width))
unlink(temp)
hemi_polar <- image_composite(mask,
hemi_polar,
"minus")
return(hemi_polar)
}
hemi_imgs <- hemi_rect_to_polar(rect_imgs)
image_append( hemi_imgs)
pol_pic_dir <- "hemi_polar_pics/"
if (!dir.exists(pol_pic_dir)){ #only create it if it hasnt alread been done
dir.create(pol_pic_dir)
all_hemi_rects <-  sphere_to_hemi_rect(img_paths)
all_polar <-  hemi_rect_to_polar(all_hemi_rects)
img_names <- sapply(strsplit(img_paths,"/"),
getElement,
2)
for (img_ind in 1:length(all_polar)){
write_to <- paste0(pol_pic_dir, img_names[img_ind])
# print(paste0(img_ind, "/", length(all_polar))) #for progress through loop
image_write(
image = all_polar[img_ind],
path = write_to)
}
}
fisheye_paths <- paste0("hemi_polar_pics/",
list.files("hemi_polar_pics"))
test_fisheye_paths <- fisheye_paths[rand_ind] #working with the same images as previous steps
test_masked_FE <- lapply(test_fisheye_paths,
import_fisheye,
display = TRUE) #import both test fisheyes, and mask them
#[[1]]@data@names subset to get filename
test_bi_FE <- lapply(test_masked_FE,
binarize_fisheye,
display = TRUE)
list.lenses
?gapfrac_fisheye
?list.lenses
for (lens in list.lenses){
print(lens)
}
?gapfrac_fisheye
test_bi_FE[[1]]
for (lens in list.lenses){
gapfrac_fisheye(test_bi_FE[[1]],
lens = lens,
display = TRUE,
nseg = 1
nrings = 1)
for (lens in list.lenses){
gapfrac_fisheye(test_bi_FE[[1]],
lens = lens,
display = TRUE,
nseg = 1,
nrings = 1)
}
test_gap <- lapply(test_bi_FE,
gapfrac_fisheye,
lens = "orthographic",
display = TRUE,
message = TRUE,
nseg = 1,
nrings = 1)
test_gap
plot(test_gap[[1]])
str(test_gap[[1]])
test_gap1 <- test_gap[[1]]
test_gap <- lapply(test_bi_FE,
gapfrac_fisheye,
lens = list.lenses[6],
display = TRUE,
message = TRUE,
nseg = 1,
nrings = 1)
test_gap <- lapply(test_bi_FE,
gapfrac_fisheye,
lens = list.lenses[6],
display = TRUE,
message = TRUE,
nseg = 1,
nrings = 1)
blogdown:::preview_site(startup = TRUE)
